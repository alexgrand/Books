if (self.CavalryLogger) { CavalryLogger.start_js(["z0gcj"]); }

__d("DOMObserver",["invariant","UserAgent","findAncestorOffsetKey","immutable","nullthrows"],(function(a,b,c,d,e,f,g){"use strict";__p&&__p();var h=b("immutable").Map,i={subtree:!0,characterData:!0,childList:!0,characterDataOldValue:!1,attributes:!1},j=b("UserAgent").isBrowser("IE <= 11");a=function(){__p&&__p();function a(a){var b=this;this.container=a;this.mutations=h();window.MutationObserver&&!j?this.observer=new window.MutationObserver(function(a){return b.registerMutations(a)}):this.onCharData=function(a){a.target instanceof Node||g(0,16525),b.registerMutation({type:"characterData",target:a.target})}}var c=a.prototype;c.start=function(){this.observer?this.observer.observe(this.container,i):this.container.addEventListener("DOMCharacterDataModified",this.onCharData)};c.stopAndFlushMutations=function(){var a=this.observer;a?(this.registerMutations(a.takeRecords()),a.disconnect()):this.container.removeEventListener("DOMCharacterDataModified",this.onCharData);a=this.mutations;this.mutations=h();return a};c.registerMutations=function(a){for(var b=0;b<a.length;b++)this.registerMutation(a[b])};c.getMutationTextContent=function(a){var b=a.type,c=a.target;a=a.removedNodes;if(b==="characterData"){if(c.textContent!=="")return c.textContent}else if(b==="childList"&&(a&&a.length))return"";return null};c.registerMutation=function(a){var c=this.getMutationTextContent(a);if(c!=null){a=b("nullthrows")(b("findAncestorOffsetKey")(a.target));this.mutations=this.mutations.set(a,c)}};return a}();e.exports=a}),null);